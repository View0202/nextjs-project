generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  u_id      Int          @id @default(autoincrement()) @map("u_id")
  firstname String       @map("firstname") @db.VarChar(255)
  lastname  String       @map("lastname") @db.VarChar(255)
  username  String       @unique @map("username")
  password  String       @map("password") @db.VarChar(255)
  image     String       @default("avatar.png") @map("image") @db.VarChar(255)
  status    users_status @map("status")
  createdAt DateTime     @map("created_at") @db.DateTime(0)
  updatedAt DateTime     @map("update_at") @db.DateTime(0)

  @@map("users")
}

model calendar {
  table_id Int      @id @default(autoincrement())
  queue_id Int
  date     DateTime @db.Date
  queue    queue    @relation(fields: [queue_id], references: [queue_id], onDelete: Cascade, map: "foreign key queue")

  @@index([queue_id], map: "foreign key queue")
}

model comment {
  comment_id Int      @id @default(autoincrement())
  comment    String   @db.VarChar(255)
  response   String   @db.VarChar(255)
  date       DateTime @db.Date
}

model customer {
  customer_id Int        @id @default(autoincrement())
  name        String     @db.VarChar(100)
  surname     String     @db.VarChar(100)
  email       String     @db.VarChar(100)
  phone       String     @db.VarChar(100)
  age         DateTime   @db.Date
  estimate    estimate[]
  queue       queue[]
}

model employees {
  emp_id             Int                  @id @default(autoincrement())
  fname              String?              @db.VarChar(100)
  lname              String?              @db.VarChar(100)
  tel                String?              @db.VarChar(15)
  email              String?              @db.VarChar(100)
  bdate              DateTime?            @db.Date
  age                Int?
  address            String?              @db.Text
  employees_position employees_position[]
  queue              queue[]
}

model employees_position {
  emp_id        Int
  position_id   Int
  employees     employees     @relation(fields: [emp_id], references: [emp_id], onUpdate: Restrict, map: "employees_position_ibfk_1")
  position_type position_type @relation(fields: [position_id], references: [position_id], onUpdate: Restrict, map: "employees_position_ibfk_2")

  @@id([emp_id, position_id])
  @@index([position_id], map: "position_id")
}

model estimate {
  estimate_id Int             @id @default(autoincrement())
  customer_id Int
  file        String          @db.VarChar(255)
  detail      String          @db.VarChar(255)
  response    String          @db.VarChar(255)
  date        DateTime        @db.Date
  status      estimate_status
  price       Decimal         @db.Decimal(10, 2)
  customer    customer        @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade, map: "foreign key customer")

  @@index([customer_id], map: "foreign key customer")
}

model finance {
  finance_id Int      @id @default(autoincrement())
  date       DateTime @db.Date
  list       String   @db.VarChar(255)
  income     Decimal  @db.Decimal(10, 2)
  expense    Decimal  @db.Decimal(10, 2)
  total      Decimal  @db.Decimal(10, 2)
  note       String   @db.Text
}

model position_type {
  position_id        Int                  @id @default(autoincrement())
  position_name      String               @db.VarChar(100)
  employees_position employees_position[]
}

model promotion {
  promotion_id   Int      @id @default(autoincrement())
  promotion_name String   @db.VarChar(255)
  detail         String   @db.Text
  date_start     DateTime @db.Date
  date_end       DateTime @db.Date
}

model queue {
  queue_id        Int          @id @default(autoincrement())
  customer_id     Int
  emp_id          Int
  service_id      Int
  service_type_id Int
  queue_date      DateTime     @db.Date
  queue_time      DateTime     @db.Time(0)
  price           Decimal      @db.Decimal(10, 2)
  total           Decimal      @db.Decimal(10, 2)
  slip            String       @db.VarChar(255)
  create_at       DateTime     @default(now()) @db.Timestamp(0)
  status          queue_status
  calendar        calendar[]
  customer        customer     @relation(fields: [customer_id], references: [customer_id], onDelete: Cascade, map: "foreign key customer_id")
  employees       employees    @relation(fields: [emp_id], references: [emp_id], onDelete: Cascade, map: "foreign key emp_id")
  service         service      @relation(fields: [service_id], references: [service_id], onDelete: Cascade, map: "foreign key service_id")
  service_type    service_type @relation(fields: [service_type_id], references: [service_type_id], onDelete: Cascade, map: "foreign key service_type_id")

  @@index([customer_id], map: "foreign key customer_id")
  @@index([emp_id], map: "foreign key emp_id")
  @@index([service_id], map: "foreign key service_id")
  @@index([service_type_id], map: "foreign key service_type_id")
}

model service {
  service_id      Int     @id @default(autoincrement())
  service_name    String  @db.VarChar(100)
  service_type_id Int
  service_price   Int
  service_time    Int
  service_detail  String  @db.Text
  service_image   String  @db.VarChar(100)
  queue           queue[]
}

model service_type {
  service_type_id   Int     @id @default(autoincrement())
  service_type_name String  @db.VarChar(100)
  queue             queue[]
}

model stock {
  stock_id        Int    @id @default(autoincrement())
  stock_name      String @db.VarChar(100)
  service_type_id Int
  amount          Int
  image           String @db.VarChar(200)
}

enum users_status {
  superadmin
  admin
  employee
  customer
}

enum estimate_status {
  Not_responded
  Responded
}

enum queue_status {
  Pending
  Confirmed
  Cancelled
  Completed
  No_Show   @map("No-Show")
}
